% windows, pwsh, enum

# list all users
Get-LocalUser

# list all groups 
Get-LocalGroup

# list all members in a group
Get-LocalGroupMember <groupname>

# list running processes
Get-Process

# list details for specific process
Get-Process <processname> | Format-List *

# list installed apps (displayname only)
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname
Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*" | select displayname

# list installed apps (all properties)
Get-ItemProperty "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*"
Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*"

# search files matching a specific name
Get-ChildItem -Path <search-path> -Include <filename> -File -Recurse -ErrorAction SilentlyContinue

# search files matching a specific name while excluding another name
Get-ChildItem -Path <search-path> -Include <filename> -Exclude <filenames-to-ignore> -File -Recurse -ErrorAction SilentlyContinue 

# search documents and text files
Get-ChildItem -Path <search-path> -Include *.txt,*.pdf,*.xls,*.xlsx,*.doc,*.docx -File -Recurse -ErrorAction SilentlyContinue

# get command history for pwsh
Get-History

# get command history for pwsh via PSReadline
(Get-PSReadlineOption).HistorySavePath

# list installed windows services - requires GUI or admin privs
Get-CimInstance -ClassName win32_Service | Select Name,State,PathName | Where-Object {$_.State -like 'Running'}

# check permissions for a file or directory
Get-Acl -Path <file-or-directory-path>

# check startup type of service
Get-CimInstance -ClassName win32_service | Select Name, StartMode | Where-Object {$_.Name -like '<service-name>'}

# list services the current user can modify
Get-ModifiableServiceFile

# list scheduled tasks (excluding tasks authored by Microsoft)
Get-ScheduledTask | 
Where-Object { 
    $_.Author -ne $null -and 
    $_.Author -ne "" -and 
    $_.Author -notlike "*Microsoft*" -and 
    $_.Author -ne "Microsoft Corporation" 
} | 
Select-Object TaskName, Author, @{ n = 'UserId'; e = { $_.Principal.UserId }}


# list scheduled tasks
Get-ScheduledTask | Select-Object Author,@{Name='TaskPath';Expression={$_.TaskPath}},TaskName | Format-Table -AutoSize